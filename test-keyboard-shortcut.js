// test-keyboard-shortcut.js - „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà

/**
 * „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ
 * TDD RED „Éï„Çß„Éº„Ç∫: Â§±Êïó„Åô„Çã„ÉÜ„Çπ„Éà„ÇíÂÆöÁæ©
 */

const fs = require('fs');
const path = require('path');

const testCases = [
  {
    name: 'Ctrl+Shift+K„Åß„Ç≥„Éû„É≥„Éâ„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã',
    description: 'manifest.json„Å´commandsË®≠ÂÆö„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã',
    expected: true,
    test: () => {
      try {
        const manifestPath = path.join(__dirname, 'manifest.json');
        const manifestContent = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        return !!(manifestContent.commands && manifestContent.commands['open-editor']);
      } catch {
        return false;
      }
    }
  },
  {
    name: 'background.js„ÅåÂ≠òÂú®„Åô„Çã',
    description: 'Service Worker„Éï„Ç°„Ç§„É´„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Çã',
    expected: true,
    test: () => {
      try {
        const backgroundPath = path.join(__dirname, 'background.js');
        return fs.existsSync(backgroundPath);
      } catch {
        return false;
      }
    }
  },
  {
    name: 'GitHub„Éö„Éº„Ç∏„Åß„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„ÅåÂãï‰Ωú„Åô„Çã',
    description: 'GitHub URL„Åã„Çâ„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÇíÊäΩÂá∫„Åß„Åç„Çã',
    expected: 'owner/repo',
    test: (url = 'https://github.com/owner/repo') => {
      // utils.js„Åã„ÇâÂÆüÈöõ„ÅÆÈñ¢Êï∞„Çí„Ç§„É≥„Éù„Éº„Éà„Åó„Å¶„ÉÜ„Çπ„Éà
      try {
        const { extractRepoInfo } = require('./utils.js');
        const repoInfo = extractRepoInfo(url);
        return repoInfo ? repoInfo.fullName : null;
      } catch {
        return null;
      }
    }
  },
  {
    name: 'ÈùûGitHub„Éö„Éº„Ç∏„ÅßÈÅ©Âàá„Å™„Ç®„É©„ÉºÂá¶ÁêÜ„Åå„Åß„Åç„Çã',
    description: 'GitHub„Éö„Éº„Ç∏„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆÂá¶ÁêÜ',
    expected: null, 
    test: (url = 'https://example.com') => {
      try {
        const { extractRepoInfo } = require('./utils.js');
        const repoInfo = extractRepoInfo(url);
        return repoInfo ? repoInfo.fullName : null;
      } catch {
        return null;
      }
    }
  },
  {
    name: 'notificationsÊ®©Èôê„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã',
    description: 'manifest.json„Å´notificationsÊ®©Èôê„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã',
    expected: true,
    test: () => {
      try {
        const manifestPath = path.join(__dirname, 'manifest.json');
        const manifestContent = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        return manifestContent.permissions && manifestContent.permissions.includes('notifications');
      } catch {
        return false;
      }
    }
  },
  {
    name: '„Ç®„Éá„Ç£„ÇøURLÊßãÁØâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã',
    description: 'buildEditorUrlÈñ¢Êï∞„ÅÆÂãï‰ΩúÁ¢∫Ë™ç',
    expected: 'vscode://file/path/to/repos/owner/repo',
    test: () => {
      try {
        const { buildEditorUrl } = require('./utils.js');
        const repoInfo = { fullName: 'owner/repo' };
        const settings = {
          editorScheme: 'vscode://file',
          basePath: '/path/to/repos/',
          openInNewWindow: false
        };
        return buildEditorUrl(repoInfo, settings);
      } catch {
        return null;
      }
    }
  },
  {
    name: 'Ë®≠ÂÆöÊ§úË®º„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã',
    description: 'validateSettingsÈñ¢Êï∞„ÅÆÂãï‰ΩúÁ¢∫Ë™ç',
    expected: false,
    test: () => {
      try {
        const { validateSettings } = require('./utils.js');
        const emptySettings = { basePath: '' };
        const validation = validateSettings(emptySettings);
        return validation.isValid;
      } catch {
        return null;
      }
    }
  }
];

/**
 * „ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åô„ÇãÈñ¢Êï∞
 */
function runTests() {
  console.log('üî¥ RED: „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„ÉàÈñãÂßã\n');
  
  let allTestsPassed = true;
  let failedTests = [];
  
  for (const testCase of testCases) {
    console.log(`„ÉÜ„Çπ„Éà: ${testCase.name}`);
    console.log(`  Ë™¨Êòé: ${testCase.description}`);
    
    try {
      const result = testCase.test();
      
      if (result === testCase.expected) {
        console.log(`  ‚úÖ ÊàêÂäü: ${result}`);
      } else {
        console.log(`  ‚ùå Â§±Êïó: ÊúüÂæÖÂÄ§ "${testCase.expected}" „ÄÅÂÆüÈöõ "${result}"`);
        allTestsPassed = false;
        failedTests.push(testCase.name);
      }
    } catch (error) {
      console.log(`  ‚ùå „Ç®„É©„Éº: ${error.message}`);
      allTestsPassed = false;
      failedTests.push(testCase.name);
    }
    
    console.log('');
  }
  
  if (allTestsPassed) {
    console.log('üü¢ ÂÖ®„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÈÄö„Çä„Åæ„Åó„ÅüÔºÅ');
    process.exit(0);
  } else {
    console.log(`üî¥ ${failedTests.length}ÂÄã„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü:`);
    failedTests.forEach(test => console.log(`  - ${test}`));
    console.log('\nÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: ÂÆüË£Ö„ÇíËøΩÂä†„Åó„Å¶„ÉÜ„Çπ„Éà„ÇíÈÄö„Åô (GREEN „Éï„Çß„Éº„Ç∫)');
    process.exit(1);
  }
}

// ÂøÖË¶Å„Å™ÂÆüË£Ö„ÉÅ„Çß„ÉÉ„ÇØ
function checkImplementationRequirements() {
  console.log('üìã ÂÆüË£ÖË¶Å‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ:\n');
  
  const requirements = [
    { 
      file: 'manifest.json', 
      feature: 'commandsË®≠ÂÆö', 
      implemented: checkManifestCommands() 
    },
    { 
      file: 'background.js', 
      feature: 'Service Worker', 
      implemented: fs.existsSync(path.join(__dirname, 'background.js')) 
    },
    { 
      file: 'manifest.json', 
      feature: 'notificationsÊ®©Èôê', 
      implemented: checkNotificationsPermission() 
    },
    { 
      file: 'background.js', 
      feature: 'chrome.commands.onCommand', 
      implemented: checkCommandHandler() 
    },
    { 
      file: 'background.js', 
      feature: '„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±ÊäΩÂá∫', 
      implemented: checkRepoExtraction() 
    },
    { 
      file: 'background.js', 
      feature: '„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', 
      implemented: checkErrorHandling() 
    }
  ];
  
  requirements.forEach(req => {
    const status = req.implemented ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${req.file}: ${req.feature}`);
  });
  
  const unimplemented = requirements.filter(req => !req.implemented);
  if (unimplemented.length === 0) {
    console.log('\nüéâ ÂÖ®„Å¶„ÅÆË¶Å‰ª∂„ÅåÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºÅ');
  } else {
    console.log('\nüéØ Êú™ÂÆüË£Ö„ÅÆÊ©üËÉΩ:');
    unimplemented.forEach(req => {
      console.log(`- ${req.file}: ${req.feature}`);
    });
  }
}

function checkManifestCommands() {
  try {
    const manifestPath = path.join(__dirname, 'manifest.json');
    const manifestContent = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
    return manifestContent.commands && manifestContent.commands['open-editor'];
  } catch {
    return false;
  }
}

function checkNotificationsPermission() {
  try {
    const manifestPath = path.join(__dirname, 'manifest.json');
    const manifestContent = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
    return manifestContent.permissions && manifestContent.permissions.includes('notifications');
  } catch {
    return false;
  }
}

function checkCommandHandler() {
  try {
    const backgroundPath = path.join(__dirname, 'background.js');
    const backgroundContent = fs.readFileSync(backgroundPath, 'utf8');
    return backgroundContent.includes('chrome.commands.onCommand.addListener');
  } catch {
    return false;
  }
}

function checkRepoExtraction() {
  try {
    const backgroundPath = path.join(__dirname, 'background.js');
    const backgroundContent = fs.readFileSync(backgroundPath, 'utf8');
    
    // background.js„ÅßextractRepoInfoÈñ¢Êï∞„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Çã„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    return backgroundContent.includes('function extractRepoInfo');
  } catch {
    return false;
  }
}

function checkErrorHandling() {
  try {
    const backgroundPath = path.join(__dirname, 'background.js');
    const backgroundContent = fs.readFileSync(backgroundPath, 'utf8');
    return backgroundContent.includes('showNotification') && backgroundContent.includes('try') && backgroundContent.includes('catch');
  } catch {
    return false;
  }
}

// „ÉÜ„Çπ„ÉàÂÆüË°å
if (require.main === module) {
  checkImplementationRequirements();
  console.log('\n' + '='.repeat(50) + '\n');
  runTests();
}

module.exports = { testCases, runTests };